{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catgs","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","protoTypes","PropTypes","string","isRequired","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMA8BeA,EA3BK,SAAC,GAAwB,IAArBC,EAAoB,EAApBA,cACpB,EAAoCC,mBAAS,KAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACxCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,gDACkCC,UAAWH,GAD7C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCwBLO,EArBM,SAAEf,GACnB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNS,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPpB,EAAQC,GACPoB,MAAM,SAAAC,GACHH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAKlB,CAAChB,IAEGiB,G,gBClBLK,EAAc,SAAC,GAAkB,IAAjBV,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACzB,OACI,sBAAKqB,UAAU,2DAAf,UACI,4BAAIX,IACJ,qBAAKY,IAAKtB,EAAKuB,IAAKb,QAKhCU,EAAYI,WAAa,CACrBd,MAAOe,IAAUC,OAAOC,WACxB3B,IAAOyB,IAAUC,OAAOC,YAGbP,QCYAQ,EAxBC,SAAC,GAAkB,IAAhB9B,EAAe,EAAfA,SAEf,EAAiCe,EAAcf,GAAlCa,EAAb,EAAQN,KAAaS,EAArB,EAAqBA,QAErB,OACI,qCACA,oBAAIO,UAAU,qDAAd,SAAqEvB,IAEnEgB,GAAW,wCAEb,qBAAKO,UAAU,YAAf,SAEYV,EAAOJ,KAAK,SAACC,GACT,OAAO,cAAC,EAAD,eAEMA,GADAA,EAAIC,aCiB1BoB,EA9BM,WAEjB,MAAsC7C,mBAAS,CAAC,cAAhD,mBAAO8C,EAAP,KAAoB/C,EAApB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ+C,EAAWvB,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CAECA,SAAaA,GADPA,Y,MCpBtCiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a615748e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ( { setCategories }) => {\n    const [inputValue, setInputValue] = useState(' ');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2){\n            setCategories( catgs => [inputValue, ...catgs] );\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nexport default AddCategory;\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n\n","export const getGifs = async( category ) => {\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=z8L84cRhMVVOIbQuduH0R8OxY88PESaX`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n    \n}","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nconst useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category)\n        .then( imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })\n        }\n\n        ) \n    }, [category]); // Ese arreglo es el component did mount\n\n    return state;\n}\n\nexport default useFetchGifs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\n            <p>{title}</p>\n            <img src={url} alt={title}/>\n        </div>\n    )\n}\n\nGifGridItem.protoTypes = {\n    title: PropTypes.string.isRequired,\n    url:   PropTypes.string.isRequired,\n}\n\nexport default GifGridItem;\n","import React, { useState, useEffect } from 'react'\n\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n        <h3 className='animate__animated animate__flash animate__delay-1s'>{ category }</h3>\n\n        { loading && <p>Loading</p> }\n\n        <div className='card-grid'>\n                {\n                    images.map( (img) => {\n                        return <GifGridItem \n                                key={img.id} \n                                { ...img }//Enviamos todod como props\n                                />\n                    })\n                }\n        </div>\n        </>\n    )\n}\n\nexport default GifGrid;\n","import React, { useState } from 'react';\n\n\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories , setCategories ] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n        // setCatergories( cats => [...cats, 'Naruto']);\n    //     setCatergories([...categories, 'Naruto'])\n    // }\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\n            \n            <ol>\n                {\n                    categories.map( category =>  { \n                        return <GifGrid \n                                key={ category }\n                                category = { category }\n                                />\n                    } )\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}